version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - |
        # Get the imageDigest of the latest image
        LATEST_DIGEST=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)
        
        # Get all image digests except the latest
        IMAGES_TO_DELETE=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query "imageDetails[?imageDigest!='${LATEST_DIGEST}'].imageDigest" --output text)
        
        if [ ! -z "$IMAGES_TO_DELETE" ]; then
          echo "Deleting old images..."
          aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids $(echo $IMAGES_TO_DELETE | sed 's/\s\+/ imageDigest=/g; s/^/imageDigest=/')
          echo "Deleted old images"
        else
          echo "No old images to delete"
        fi

  build:
    commands:
      - set -e
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$CODEBUILD_RESOLVED_SOURCE_VERSION .
      - docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$CODEBUILD_RESOLVED_SOURCE_VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s"}' $ECR_REGISTRY/$ECR_REPOSITORY:$CODEBUILD_RESOLVED_SOURCE_VERSION > imageDetail.json
      - echo Updating Lambda function...
      - |
        if ! aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$CODEBUILD_RESOLVED_SOURCE_VERSION; then
          echo "Failed to update Lambda function"
          exit 1
        fi
      - echo "Lambda function updated successfully"

artifacts:
  files:
    - imageDetail.json